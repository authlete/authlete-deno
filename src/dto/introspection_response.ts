// Copyright (C) 2020 Authlete, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


import ct from 'https://cdn.pika.dev/class-transformer@^0.2.3';
import 'https://cdn.pika.dev/reflect-metadata@^0.1.13';
import { AuthzDetails } from "./authz_details.ts";
import { Property } from "./property.ts";
const { Type, Transform } = ct;


/**
 * Response from Authlete `/auth/introspection` API.
 */
export class IntrospectionResponse
{
    /**
     * The next action the service implementation should take.
     */
    @Transform((value: any) => IntrospectionResponse.Action[value])
    public action!: IntrospectionResponse.Action;


    /**
     * The client ID.
     */
    public clientId!: number;


    /**
     * The subject (= resource owner's ID).
     *
     * This property is not set if the access token was generated by
     * [Client Credentials Grant](http://tools.ietf.org/html/rfc6749#section-4.4),
     * which means that the access token is not associated with any
     * specific end-user.
     */
    public subject?: string;


    /**
     * The scopes covered by the access token.
     */
    public scopes?: string[];


    /**
     * Flag to indicate whether the access token exists.
     */
    public existent!: boolean;


    /**
     * Flag to indicate whether the access token is usable (= exists
     * and has not expired).
     */
    public usable!: boolean;


    /**
     * Flag to indicate whether the access token covers the required scopes.
     */
    public sufficient!: boolean;


    /**
     * Flag to indicate whether the access token is refreshable.
     */
    public refreshable!: boolean;


    /**
     * Entity body of the response to the client.
     */
    public responseContent!: string;


    /**
     * The time at which the access token expires in milliseconds since
     * the Unix epoch (1970-01-01).
     */
    public expiresAt!: number;


    /**
     * Extra properties associated with the access token.
     */
    @Type(() => Property)
    public properties?: Property[];


    /**
     * The client ID alias when the authorization request or the token
     * request for the access token was made. Note that this value may
     * be different from the current client ID alias.
     */
    public clientIdAlias?: string;


    /**
     * Flag which indicates whether the client ID alias was used when
     * the authorization request or the token request for the access
     * token was made.
     */
    public clientIdAliasUsed!: boolean;


    /**
     * The client certificate thumbprint used to validate the MTLS-bound
     * access token.
     */
    public certificateThumbprint?: string;


    /**
     * The target resources. This represents the resources specified by
     * the `resource` request parameters or by the `resource` property
     * in the request object.
     *
     * See _"Resource Indicators for OAuth 2.0"_ for details.
     */
    public resources?: string[];


    /**
     * The target resources of the access token.
     *
     * The target resources this property has may be the same as or
     * different from the ones returned by the value of `resources`
     * property.
     *
     * In some flows, the initial request and the subsequent token request
     * are sent to different endpoints. Example flows are the Authorization
     * Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA
     * Poll Mode and the Device Flow. In these flows, not only the initial
     * request but also the subsequent token request can include the
     * `resource` request parameters. The purpose of the `resource` request
     * parameters in the token request is to narrow the range of the target
     * resources from the original set of target resources requested by
     * the preceding initial request. If narrowing down is performed,
     * the target resources the `resources` property has and the ones
     * this property has are different. The value of this property is
     * the narrowed set of target resources.
     *
     * See _"Resource Indicators for OAuth 2.0"_ for details.
     */
    public accessTokenResources?: string[];


    /**
     * The authorization details. This represents the value of the
     * `authorization_details` request parameter which is defined in
     * _"OAuth 2.0 Rich Authorization Requests"_.
     */
    @Type(() => AuthzDetails)
    public authorizationDetails?: AuthzDetails;
}

export namespace IntrospectionResponse
{
    /**
     * The next action that the service implementation should take.
     */
    export enum Action
    {
        /**
         * The request from the service implementation was wrong or
         * an error occurred in Authlete. The service implementation
         * should return `"500 Internal Server Error"` to the client
         * application.
         */
        INTERNAL_SERVER_ERROR,


        /**
         * The request does not contain an access token. The service
         * implementation should return `"400 Bad Request"` to the client
         * application.
         */
        BAD_REQUEST,


        /**
         * The access token does not exist or has expired. The service
         * implementation should return `"401 Unauthorized"` to the
         * client application.
         */
        UNAUTHORIZED,


        /**
         * The access token does not cover the required scopes. The
         * service implementation should return `"403 Forbidden"` to
         * the client application.
         */
        FORBIDDEN,


        /**
         * The access token is valid. The service implementation should
         * return the protected resource to the client application.
         */
        OK,
    }
}